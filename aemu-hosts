#!/usr/bin/env bash

# Sync /etc/hosts to the Android emulator.
# Requires Bash 4.
# Copyright (c) 2013, Matthew Caruana Galizia <m@m.cg>
# License: MIT <http://mattcg.mit-license.org/>

usage() {
cat << EOF
Sync /etc/hosts to the Android emulator.

USAGE:

aemu-hosts [options]

OPTIONS:
	-h	Show this message.
	-e	Edit hosts before transferring.
	-a	The AVD name (will show a list for selection if unspecified).
EOF
}

# Whether to open the hosts file for editing before syncing.
edit=false

# The selected AVD name.
avd=""

while getopts "hea:" OPTION
do
	case $OPTION in
		h)
			usage
			exit 1
			;;
		e)
			edit=true
			;;
		a)
			avd=$OPTARG
			;;
	esac
done

# Set the prompt for the select command.
PS3="Type a number or 'q' to quit: "

# Declare an associative array of hosts.
declare -A hosts

# Read host file entries into the array using process substitution.
# Does the inverse operation if $2 = "remove".
# Ref: http://stackoverflow.com/a/9985310/821334
store_hosts ( ) {
	while read address name; do
		if [[ $2 == "remove" ]]; then
			remove_host $name
		else

			# Android uses a special address for the host loopback.
			if [[ $address == "127.0.0.1" ]]; then
				hosts[$name]="10.0.2.2"
			else
				hosts[$name]="$address"
			fi
		fi
	done < <(cat $1 | grep -v '^#' | grep -v '^$' | egrep -v '(broadcast|local)host\s*$')
}

# Remove a host from the array if set.
remove_host ( ) {
	if [[ ! -z "${hosts[$1]}" ]]; then
		unset hosts[$1]
	fi
}

# Append to hosts file.
write_hosts ( ) {
	for name in "${!hosts[@]}"; do
		echo "${hosts["$name"]} $name" >> $1
	done
}

# Debug output.
output_hosts ( ) {
	for name in "${!hosts[@]}"; do
		echo "$name - ${hosts["$name"]}"
	done
}

select_avd ( ) {

	# Create a list of virtual device names to display.
	list=$(android list avd -c)

	# Show a menu and ask for input.
	select name in $list; do
		if [ -n "$name" ]; then
			avd=$name
		else
			exit 1
		fi
		break
	done
}

edit_file ( ) {

	# Check the visual editor.
	if [ -z "$VISUAL" ]; then
		editor=vi
	else
		editor=$VISUAL
	fi

	$editor $1
}

store_hosts "/etc/hosts"

if [ -z $avd ]; then
	select_avd
fi

echo "Loading ${avd} in emulator..."
emulator -partition-size 512 -avd "${avd}" &> /dev/null &

echo "Waiting for remount..."
sleep 3
until [[ "${output}" == "remount succeeded" ]]; do
	output=$(adb remount 2> /dev/null)
	sleep 1
done

tmpfile=/tmp/android-hosts.$$.txt
adb pull /system/etc/hosts $tmpfile
store_hosts $tmpfile "remove"
write_hosts $tmpfile

if $edit; then
	edit_file $tmpfile
fi

adb push $tmpfile /system/etc/hosts
rm $tmpfile
